proc make_chunktree_viewer {} {

  set model [currently_selected_model]

  if {$model == "nil"} {
    tk_messageBox -icon info -type ok -title "Chunk Tree" -message "Chunk Tree memory viewer requires a current model."
  } else {
    set win [toplevel [new_variable_name .chunktree]]
    wm withdraw $win

    record_new_window $win $win $model

    wm geometry $win [get_configuration .chunktree $win]
  
    set filter_label [label $win.filter_label -text "Filter:" -justify left -font label_font]
    
    set list_frame [frame $win.list_frame -borderwidth 2]  
    
    set list_box [listbox $list_frame.list_box -listvar \
                          $list_frame.list_box.var \
                          -yscrollcommand "$list_frame.list_scrl set" \
                          -selectmode single \
                          -exportselection 0 -font list_font -bd 0]
  
    set list_scroll_bar [scrollbar $list_frame.list_scrl -command "$list_box yview"]


    # here's the canvas for the chunk display


    set frame [frame $win.frame -borderwidth 0]  
 
  
    set canvas [canvas $win.frame.canvas  \
                       -xscrollcommand "$win.frame.scrlx set" \
                       -yscrollcommand "$win.frame.scrly set" \
                       -bg white]
   
       
    scrollbar $win.frame.scrlx \
              -command "$canvas xview" -orient horizontal

    scrollbar $win.frame.scrly \
              -command "$canvas yview" -orient vertical



    bind $list_box <<ListboxSelect>> "select_chunktree $list_box $canvas $model"


    set save_button [button $win.save -text "Save" -font button_font -command "save_chunktree $canvas"]


    # Here is where I create my own drop-down (combobox, whatever you want to 
    # call it) widget for the filter.  This one is actually going to be a button
    # that when pressed displays the list of items to choose from.  I guess 
    # that's slightly outside of the style guidelines, but it doesn't seem too 
    # bad to me but if people don't like it maybe I'll fix it then.


    set filter_button [button $win.filter_button -text "_none_" -borderwidth 2 \
                              -relief sunken -font button_font\
                              -command "chunktree_drop_list \
                                                    $win \
                                                    $win.filter_button \
                                                    $list_box \
                                                    $canvas \
                                                    $model"]


    place $filter_label -x 0 -y 5 -width 40 -height 20
    place $filter_button -x 42 -y 5 -relwidth 1.0 -width -135 -height 24
    place $save_button -relx 1.0 -x -92 -y 5 -width 90 -height 24

    place $list_frame -relx 0.0 -y 35 -relheight 1.0 -height -35 -relwidth .4
    place $frame -relx .4 -y 35 -relheight 1.0 -height -35 -relwidth .6
     
    pack $list_scroll_bar -side right -fill y 
    pack $list_box -side left -expand 1 -fill both

    pack $win.frame.scrlx -side bottom -fill x
    pack $win.frame.scrly -side right -fill y

    set xh [$win.frame.scrlx cget -width]
    set yw [$win.frame.scrly cget -width]

    place $canvas -relx 0 -rely 0 -relwidth 1.0 -relheight 1.0 -width -$yw -height -$xh

    set_update_script $win "update_chunktree_list $win $list_box $canvas $model $filter_button"


    # now show the window 

    wm deiconify $win
    focus $win
  }
}


proc update_chunktree_list {win list canvas model filter_button} {

  set chunks [lsort [lindex [call_act_r_command "chunks" $model] 0]]

  set selection [$list curselection]

  if {$selection != ""} {
    set name [$list get $selection]
  }


  set filter [$filter_button cget -text]

  global $win.filters
  global $win.filter_dict

  set $win.filter_dict [dict create]
  upvar $win.filter_dict filter_dict
  
  set filters ""

  foreach x $chunks {
    set sl [lindex [call_act_r_command "chunk-filled-slots-list" $model [list $x t]] 0]
    
    if {$sl == ""} {
      set sl "( )"
    }

    if {[lsearch $filters $sl] == -1} {
      lappend filters $sl
    }

    dict lappend filter_dict $sl $x
  }

  set $win.filters "_none_ [lsort $filters]"

  global $list.var

  if {[lsearch $filters $filter] == -1} {
    $filter_button configure -text _none_
    set $list.var $chunks
    set current $chunks
  } else {
    set current [dict get $filter_dict $filter]
    set $list.var $current 
  }

  if {$selection != ""} { 
  # check if the selection is still available

    $list selection clear 0 end
    set newpos [lsearch -exact $current $name]

    if {$newpos != -1} {
      $list selection set $newpos
    }
  }

  select_chunktree $list $canvas $model  

}


proc select_chunktree {list_box canvas model} {

  if {[$list_box curselection] != ""} {
    draw_chunktree $canvas $model [$list_box get [$list_box curselection]]
  } else {
    $canvas delete all
  }
}



proc draw_chunktree {canvas model chunk} {

  $canvas delete all

  set data [parse_chunktree $model $chunk "" ""]

  $canvas configure -width [lindex $data 4]
  
  set c_height [font metrics env_window_font -linespace]
  set s_height [font metrics dm_tree_slot_name -linespace]

  set y 0
  set x [expr round([lindex $data 4] / 2)]

  set height [draw_subtree $canvas $data $c_height $s_height 0 0 "" ""]

  
  $canvas configure -height $height
  $canvas configure -scrollregion "0 0 [lindex $data 4] $height"
  
}


proc draw_subtree {canvas node ch sh xoff yoff px py} {

  set y $yoff
  set x [expr $xoff + round([lindex $node 4] / 2)]
 
  if {$px != ""} {
    $canvas create line $px $py $x $y -fill darkgray -width 2
  }

  if {[lindex $node 1] != ""} {
    $canvas create text $x $y -font dm_tree_slot_name -fill blue -text [lindex $node 1] -anchor n
    set y [expr $y + $sh]
  }

  $canvas create text $x $y -font env_window_font -fill [lindex $node 3] -text [lindex $node 0] -anchor n
  set y [expr $y + $ch]

  set my $y
  set sx $xoff
  
  foreach sub [lindex $node 2] {
  
    set sy [draw_subtree $canvas $sub $ch $sh $sx [expr $y + 50] $x $y]
    set sx [expr $sx + [lindex $sub 4]]
    if {$sy > $my} {
      set my $sy
    }
  }

  return $my
}
  

proc parse_chunktree {model chunk slot used} {

  set s_w [font measure dm_tree_slot_name " $slot "]
  set c_w [font measure env_window_font " $chunk "]
  
  if {$s_w > $c_w} {
    set w $s_w
  } else {
     set w $c_w
  }

  if {[lsearch $used $chunk] != -1} {
    return [list $chunk $slot "" red $w]
  } elseif {[call_act_r_command "chunk-p" $model $chunk] == ""} {
    return [list $chunk $slot "" black $w]
  } else {

    set children ""
    set cw 0

    foreach s [lindex [call_act_r_command "chunk-filled-slots-list" $model [list $chunk t]] 0] {
    
      set value [lindex [call_act_r_command "chunk-slot-value" $model [list $chunk $s]] 0]

      set child [parse_chunktree $model $value $s "$chunk $used"]

      set cw [expr $cw + [lindex $child 4]]
      
      lappend children $child
    }

    if {$cw > $w} {
      set w $cw
    }

    return [list $chunk $slot $children darkgreen $w]
  }
}
      



# declarative_drop_list
# This is the procedure that implements the interaction of a drop-down
# widget triggered by pressing a button.  Its parameters are that button (but)
# the window (top) that holds a frame (drop_frame) which contains 
# the listbox (drop_box) and the scrollbar (drop_scroll_bar), and the chunk 
# list widget (list_box).  
# It displays the selection listbox below the button and waits for either a 
# selection or the dismissal of the selection box. If there is a selection 
# different from the current one it updates the button to reflect the new 
# choice and issues an update request for the chunk list for chunks with the
# specified slots.

proc pick_ct_drop_selection {var box} {
  global $var

  if {[$box curselection] != ""} {
    set $var [$box get [$box curselection]] 
  } else {
    set $var -1
  }
}

proc quit_ct_drop_selection {var} {
  global $var
  set $var -1
}


proc chunktree_drop_list {win but list_box text_box model} {

  # first create a toplevel window that will hold the selection list
  # it's got to be a separate window so that things like leaving it's focus
  # can easily be trapped

  set top [toplevel $win.top]
  wm overrideredirect $top 1
  wm withdraw $top 


  # now create a listbox to hold the list that drops down

  set drop_frame [frame $top.frame -borderwidth 0] 

  set drop_box [listbox $drop_frame.drop_box \
                        -listvar $drop_frame.drop_box.var \
                        -yscrollcommand "$drop_frame.drop_scrl set" \
                        -exportselection 0 -font list_font -bd 0] 

  set drop_scroll_bar [scrollbar $drop_frame.drop_scrl -command "$drop_box yview"]

  # create a variable for recording the response

  global $but.choice

  set $but.choice ""

  # Only take the selection when the button is released or return pressed
  
  bind $drop_box <ButtonRelease-1> "pick_ct_drop_selection $but.choice $drop_box"
  
  bind $drop_box <Key-Return> "pick_ct_drop_selection $but.choice $drop_box"

  # have the esc key close down the interaction without a choise and moving outside the window
  
  bind $drop_box <Key-Escape> "quit_ct_drop_selection $but.choice"

  # if the user moves the focus outside of this window then destroy it

  bind $top <FocusOut> "quit_ct_drop_selection $but.choice"

  # record the current filter

  set current_filter [$but cget -text]

  # get the new one

  global $drop_frame.drop_box.var

  global $win.filters
  upvar $win.filters filters

  set $drop_frame.drop_box.var $filters

  # figure out where the current selection is in the list
  # so that it can be made visible

  set choice [lsearch -exact $filters $current_filter]

  # make the selection window as wide as the button and 5 lines high

  set f_height [font metrics list_font -linespace]

  $top configure -width [winfo width $but] -height [expr 5*$f_height]

  # put the selection components into the top level window  

  place $drop_frame -relx 0.0 -rely 0.0 -relheight 1.0  -relwidth 1.0
     
  pack $drop_scroll_bar -side right -fill y 
  pack $drop_box -side left -expand 1 -fill both

  # move the top level window so that it's directly below the button

  set x [winfo rootx $but]
  set y [winfo rooty $but]
  set y [expr $y + [winfo height $but]]

  wm geometry $top "+$x+$y"

  # make it visible and ensure it's on top

  wm deiconify $top
  raise $top

  # set the selected item in the list to the current filter choice and
  # make sure it's visible in the list

  $drop_box activate $choice
  $drop_box see $choice

  # make the selection box the current focus

  focus $drop_box 

  # wait for the user to pick something or dismiss the window

  tkwait variable $but.choice

  upvar $but.choice new_choice

  destroy $top

  # if the user picked something that was different from
  # what was chosen before then change the button's text

  if {$new_choice != -1 && $new_choice != $current_filter} {
      $but configure -text $new_choice
  }

  # make sure to focus on the main window again to
  # have the update occur automatically because 
  # if it gets called directly it could happen twice

  focus $win

}


proc save_chunktree {c} {
  set fname [tk_getSaveFile -title "Save Chunk Tree as"\
                                  -filetypes {{"Encapsulated PostScript" "*.eps"}}]

  if {$fname != ""} {
    $c postscript -file $fname -width [$c cget -width] -height [$c cget -height] -x 0 -y 0  -pageanchor nw 
  }
}



# Make a button for the control panel that will open a new declarative viewer

button [control_panel_name].chunktree -command {make_chunktree_viewer} \
       -text "Chunk Tree" -font button_font

# put that button on the control panel

pack [control_panel_name].chunktree
